// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id         Int    @id @default(autoincrement())
  email      String  @unique
  password   String
  role       String
  isdeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt

  Courrier Courrier[]
}
model Courrier {
  id            Int    @id @default(autoincrement())
  numero_ref    String
  objet          String
  nom_expediteur String
  prenom_expediteur String
  telephone_expediteur String
  statut            String    @default("En attente")
  keywords          String[]  @default([])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  User           User   @relation(fields: [userId], references: [id])
  dossierId  Int?     // ID du dossier auquel le courrier est lié
  dossier    Dossier? @relation(fields: [dossierId], references: [id])
  Traitement Traitement[]
}

model Employee {
  id         Int    @id @default(autoincrement())
  nom        String
  prenom     String
  fonction   String
  telephone String
  email       String  @unique
  password   String
  role       String
  isdeleted Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Traitement Traitement[]
}

model Traitement {
  id             Int    @id @default(autoincrement())
  commentaire     String?
  urlsPj        String[]        @default([])
  employeeId      Int
  Employee       Employee   @relation(fields: [employeeId], references: [id])
  courrierId       Int
  Courrier       Courrier   @relation(fields: [courrierId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Dossier {
  id          Int       @id @default(autoincrement())
  name        String    // Nom du dossier
  parentId    Int?      // ID du dossier parent (null pour les dossiers racines)
  parent      Dossier?  @relation("ParentChild", fields: [parentId], references: [id])
  children    Dossier[] @relation("ParentChild") // Relation avec les sous-dossiers
  courriers   Courrier[] // Liste des courriers classés dans ce dossier
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
} 

